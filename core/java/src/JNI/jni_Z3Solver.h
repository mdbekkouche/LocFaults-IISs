/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class solver_z3_Z3Solver */

#ifndef _Included_solver_z3_Z3Solver
#define _Included_solver_z3_Z3Solver
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3Init
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3Init
  (JNIEnv *, jclass);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3Release
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_solver_z3_Z3Solver_z3Release
  (JNIEnv *, jclass, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3Check
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3Check
  (JNIEnv *, jclass, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3DelModel
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_solver_z3_Z3Solver_z3DelModel
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3Version
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_solver_z3_Z3Solver_z3Version
  (JNIEnv *, jclass);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3PushContext
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_solver_z3_Z3Solver_z3PushContext
  (JNIEnv *, jclass, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3PopContext
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_solver_z3_Z3Solver_z3PopContext
  (JNIEnv *, jclass, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkVar
 * Signature: (JLjava/lang/String;I)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkVar
  (JNIEnv *, jclass, jlong, jstring, jint);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkIntVar
 * Signature: (JLjava/lang/String;II)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkIntVar
  (JNIEnv *, jclass, jlong, jstring, jint, jint);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkArray
 * Signature: (JLjava/lang/String;I)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkArray
  (JNIEnv *, jclass, jlong, jstring, jint);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkIntArray
 * Signature: (JLjava/lang/String;III)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkIntArray
  (JNIEnv *, jclass, jlong, jstring, jint, jint, jint);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkBoolCst
 * Signature: (JZ)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkBoolCst
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkIntCst
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkIntCst
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkRealCst
 * Signature: (JLjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkRealCst
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkOp
 * Signature: (JIJJ)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkOp
  (JNIEnv *, jclass, jlong, jint, jlong, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3AddCtr
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_solver_z3_Z3Solver_z3AddCtr
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3AstToString
 * Signature: (JJ)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_solver_z3_Z3Solver_z3AstToString
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3GetValue
 * Signature: (JJJ)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_solver_z3_Z3Solver_z3GetValue
  (JNIEnv *, jclass, jlong, jlong, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3GetArrayValue
 * Signature: (JJJI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_solver_z3_Z3Solver_z3GetArrayValue
  (JNIEnv *, jclass, jlong, jlong, jlong, jint);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3GetArrayVariable
 * Signature: (JJJ)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3GetArrayVariable
  (JNIEnv *, jclass, jlong, jlong, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkIfThenElse
 * Signature: (JJJJ)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkIfThenElse
  (JNIEnv *, jclass, jlong, jlong, jlong, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkDistinct
 * Signature: (J[J)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkDistinct
  (JNIEnv *, jclass, jlong, jlongArray);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkForAll
 * Signature: (J[JJ)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkForAll
  (JNIEnv *, jclass, jlong, jlongArray, jlong);

/*
 * Class:     solver_z3_Z3Solver
 * Method:    z3MkExist
 * Signature: (J[JJ)J
 */
JNIEXPORT jlong JNICALL Java_solver_z3_Z3Solver_z3MkExist
  (JNIEnv *, jclass, jlong, jlongArray, jlong);

#ifdef __cplusplus
}
#endif
#endif
